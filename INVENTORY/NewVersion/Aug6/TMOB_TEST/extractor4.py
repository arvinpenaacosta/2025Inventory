import os
import sqlite3
import json
import sys
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QWidget,
                             QPushButton, QLabel, QFileDialog, QMessageBox,
                             QMenuBar, QMenu, QAction, QListWidget, QLineEdit,
                             QRadioButton, QHBoxLayout, QTextEdit)
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import QFont

class ConverterThread(QThread):
    """Thread for running conversion process"""
    log_signal = pyqtSignal(str)
    finished_signal = pyqtSignal(str, str) # Pass output path and format for save prompt
    
    def __init__(self, db_path, table_name, output_format):
        super().__init__()
        self.db_path = db_path
        self.table_name = table_name
        self.output_format = output_format
        self.running = True
        self.data = None
        
    def run(self):
        try:
            self.convert_data()
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error: {str(e)}")
        finally:
            self.finished_signal.emit(self.output_format, self.table_name)
    
    def convert_data(self):
        """Extract and convert SQLite data to specified format"""
        if not os.path.exists(self.db_path):
            self.log_signal.emit(f"‚ùå Database not found: {self.db_path}")
            return
            
        try:
            # Connect to database
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # Verify table exists
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (self.table_name,))
            if not cursor.fetchone():
                self.log_signal.emit(f"‚ùå Table '{self.table_name}' not found")
                conn.close()
                return
                
            # Extract data
            self.log_signal.emit(f"üöÄ Extracting data from {self.table_name}...")
            sql = f"SELECT * FROM {self.table_name}"
            rows = conn.execute(sql).fetchall()
            conn.close()
            
            self.data = [{k: row[k] for k in row.keys()} for row in rows]
            self.log_signal.emit(f"‚úÖ Extracted {len(self.data)} rows")
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå Conversion error: {e}")
    
    def save_to_file(self, output_path):
        """Save data to the specified file path"""
        try:
            # Ensure output directory exists
            output_dir = os.path.dirname(output_path)
            if output_dir and not os.path.exists(output_dir):
                os.makedirs(output_dir, exist_ok=True)
            
            if self.output_format == 'js':
                js_content = f"""// Auto-generated on {datetime.now()}
// Generated by SQLite to JS/JSON Converter
const DataIn = {json.dumps(self.data, ensure_ascii=False, indent=2, default=str)};
"""
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(js_content)
            else:
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(self.data, f, ensure_ascii=False, indent=2, default=str)
            
            self.log_signal.emit(f"‚úÖ Saved to {os.path.basename(output_path)} ({len(self.data)} records)")
        except Exception as e:
            self.log_signal.emit(f"‚ùå Write error: {e}")

class SQLiteConverterGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.converter_thread = None
        self.db_path = ''
        self.init_ui()
        
    def init_ui(self):
        self.setWindowTitle("SQLite to JS/JSON Converter")
        self.setGeometry(100, 100, 400, 500)
        
        # Menu bar
        menubar = self.menuBar()
        file_menu = menubar.addMenu("File")
        about_action = QAction("About", self)
        about_action.triggered.connect(self.show_about_dialog)
        file_menu.addAction(about_action)
        
        # Central widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()
        central_widget.setLayout(layout)
        
        # Database selection
        self.db_label = QLabel("SQLite Database:")
        self.db_label.setFont(QFont("Arial", 12))
        layout.addWidget(self.db_label)
        
        self.db_entry = QLineEdit()
        self.db_entry.setReadOnly(True)
        layout.addWidget(self.db_entry)
        
        self.browse_db_btn = QPushButton("Browse Database")
        self.browse_db_btn.clicked.connect(self.browse_database)
        layout.addWidget(self.browse_db_btn)
        
        # Table selection
        self.table_label = QLabel("Select Table:")
        self.table_label.setFont(QFont("Arial", 12))
        layout.addWidget(self.table_label)
        
        self.table_list = QListWidget()
        self.table_list.setFixedHeight(100)
        layout.addWidget(self.table_list)
        
        # Output format selection
        self.format_label = QLabel("Output Format:")
        self.format_label.setFont(QFont("Arial", 12))
        layout.addWidget(self.format_label)
        
        # Radio buttons for format selection
        self.format_layout = QHBoxLayout()
        self.json_radio = QRadioButton("JSON (.json)")
        self.js_radio = QRadioButton("JavaScript (.js)")
        self.json_radio.setChecked(True)  # Default to JSON
        self.format_layout.addWidget(self.json_radio)
        self.format_layout.addWidget(self.js_radio)
        layout.addLayout(self.format_layout)
        
        # Process display box
        self.process_label = QLabel("Process Log:")
        self.process_label.setFont(QFont("Arial", 12))
        layout.addWidget(self.process_label)
        
        self.process_display = QTextEdit()
        self.process_display.setReadOnly(True)
        self.process_display.setFixedHeight(100)
        layout.addWidget(self.process_display)
        
        # Convert button
        self.convert_btn = QPushButton("Convert")
        self.convert_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        self.convert_btn.clicked.connect(self.start_conversion)
        layout.addWidget(self.convert_btn)
        
        # Clear log button
        self.clear_log_btn = QPushButton("Clear Log")
        self.clear_log_btn.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        self.clear_log_btn.clicked.connect(self.clear_process_log)
        layout.addWidget(self.clear_log_btn)
        
        # Styling
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ffffff;
            }
            QLineEdit {
                padding: 5px;
                border: 1px solid #dee2e6;
                border-radius: 4px;
            }
            QListWidget {
                border: 1px solid #dee2e6;
                border-radius: 4px;
            }
            QTextEdit {
                border: 1px solid #dee2e6;
                border-radius: 4px;
            }
            QRadioButton {
                padding: 5px;
            }
        """)
    
    def show_about_dialog(self):
        """Show About dialog"""
        QMessageBox.about(self, "About SQLite to JS/JSON Converter",
                        "Convert SQLite database tables to JS or JSON files.\n\nDeveloped by xAI - 2025")
    
    def browse_database(self):
        """Open file dialog to select SQLite database"""
        file_path, _ = QFileDialog.getOpenFileName(self, "Select SQLite Database", "", "SQLite Databases (*.db *.sqlite);;All Files (*)")
        if file_path:
            self.db_path = file_path
            self.db_entry.setText(file_path)
            self.load_tables()
    
    def load_tables(self):
        """Load table names from selected database"""
        self.table_list.clear()
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            if tables:
                self.table_list.addItems(tables)
                self.show_message(f"‚úÖ Loaded {len(tables)} tables")
            else:
                self.show_message("‚ö†Ô∏è No tables found in database")
        except Exception as e:
            self.show_message(f"‚ùå Error loading tables: {e}")
    
    def start_conversion(self):
        """Start the conversion process"""
        if not self.db_path:
            QMessageBox.warning(self, "Warning", "Please select a SQLite database file!")
            return
        if not self.table_list.currentItem():
            QMessageBox.warning(self, "Warning", "Please select a table to convert!")
            return
            
        if self.converter_thread and self.converter_thread.isRunning():
            QMessageBox.warning(self, "Warning", "Conversion is already in progress!")
            return
            
        self.convert_btn.setEnabled(False)
        output_format = 'json' if self.json_radio.isChecked() else 'js'
        self.converter_thread = ConverterThread(
            self.db_path,
            self.table_list.currentItem().text(),
            output_format
        )
        self.converter_thread.log_signal.connect(self.show_message)
        self.converter_thread.finished_signal.connect(self.handle_conversion_finished)
        self.converter_thread.start()
        self.show_message("üöÄ Starting conversion...")
    
    def handle_conversion_finished(self, output_format, table_name):
        """Prompt for save location and save the file"""
        self.convert_btn.setEnabled(True)
        if not self.converter_thread.data:
            self.show_message("‚ö†Ô∏è No data to save")
            self.converter_thread = None
            return
            
        format_ext = '.json' if output_format == 'json' else '.js'
        default_filename = f"{table_name}{format_ext}"
        output_path, _ = QFileDialog.getSaveFileName(
            self,
            "Save Output File",
            default_filename,
            f"Output Files (*{format_ext});;All Files (*)"
        )
        
        if output_path:
            # Ensure correct extension
            if not output_path.endswith(format_ext):
                output_path += format_ext
            self.converter_thread.save_to_file(output_path)
        
        self.converter_thread = None
        self.show_message("‚úÖ Conversion completed")
    
    def show_message(self, message):
        """Append message to process display box"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        self.process_display.append(f"{timestamp} - {message}")
        self.process_display.ensureCursorVisible()
    
    def clear_process_log(self):
        """Clear the process display box"""
        self.process_display.clear()

def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = SQLiteConverterGUI()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()